<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="f.!!ahjFh(!nYgZeln5_">distance</variable></variables><block type="typescript_statement" disabled="true" editable="false" x="772" y="-170"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace basic {" line1="    let step_time = 0;" line2="" line3="    function right_forward () {" line4="        pins.digitalWritePin(DigitalPin.P16, 1)" line5="    }" line6="    function turnLeft () {" line7="        left_forward()" line8="        right_backward()" line9="    }" line10="    function right_backward () {" line11="        pins.digitalWritePin(DigitalPin.P0, 1)" line12="    }" line13="    function driveBackwards () {" line14="        left_backward()" line15="        right_backward()" line16="    }" line17="    function left_backward () {" line18="        pins.digitalWritePin(DigitalPin.P8, 1)" line19="    }" line20="    export function rightOneStep () {" line21="        turnRight()" line22="        basic.pause(step_time)" line23="        all_stop()" line24="    }" line25="    export function leftOneStep () {" line26="        turnLeft()" line27="        basic.pause(step_time)" line28="        all_stop()" line29="    }" line30="    export function backwardOneStep () {" line31="        driveBackwards()" line32="        basic.pause(step_time)" line33="        all_stop()" line34="    }" line35="    export function measure_distance () {" line36="        distance = sonar.ping(" line37="        DigitalPin.P4," line38="        DigitalPin.P11," line39="        PingUnit.Centimeters" line40="        )" line41="    }" line42="    function turnRight () {" line43="        right_forward()" line44="        left_backward()" line45="    }" line46="    export function forwardOneStep () {" line47="        driveForward()" line48="        basic.pause(step_time)" line49="        all_stop()" line50="    }" line51="    function driveForward () {" line52="        left_forward()" line53="        right_forward()" line54="    }" line55="    function left_forward () {" line56="        pins.digitalWritePin(DigitalPin.P12, 1)" line57="    }" line58="    function all_stop () {" line59="        pins.digitalWritePin(DigitalPin.P12, 0)" line60="        pins.digitalWritePin(DigitalPin.P16, 0)" line61="        pins.digitalWritePin(DigitalPin.P8, 0)" line62="        pins.digitalWritePin(DigitalPin.P0, 0)" line63="    }" line64="}" numlines="65"></mutation><next><block type="variables_set" disabled="true"><field name="VAR" id="f.!!ahjFh(!nYgZeln5_">distance</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow></value></block></next></block></xml>